package edu.cpt187.hatton.exercise6;

import java.util.Scanner;


public class MainClass 
{
	//declare and initialize all class constants
	public static final char[] MENU_CHARS = {'A', 'B', 'Q'};
	public static final String[] MENU_OPTIONS = {"Login","Create an Account", "Quit"};
	public static final char[] FILE_MENU_CHARS = {'A', 'B', 'R'};
	public static final String[] FILE_MENU_OPTIONS = {"Load Inventory", "Create Order", "Return to Main Menu"};
	public static final char[] SUB_MENU_CHARS = {'A', 'B', 'C', 'D'};
	public static final String INVENTORY_FILE_NAME = "MasterInventoryFile.dat";
	public static final String ACCOUNTS_FILE_NAME = "MasterUserFile.dat";
	
	//beginning of main method
	public static void main(String[] args) 
	{

		//instantiation statement
		Inventory currentInventory = new Inventory();
		Order currentOrder = new Order();
		WriteOrder orders = new WriteOrder(INVENTORY_FILE_NAME);
		UserAccounts currentUser = new UserAccounts(ACCOUNTS_FILE_NAME);

		//declare and initialize scanner
		Scanner input = new Scanner(System.in);

		//declare and initialize all local variables
		String userName = "";
		char menuSelection = ' ';

		//display welcome banner
		displayWelcomeBanner();

		//prime read
		menuSelection = validateMenuSelection(input);

		//run while quit is not selected
		while (menuSelection != 'Q')
		{
			currentUser.setUserAccountArrays();
			userName = getUserName(input);
			//if menu selection != 'A'
			if (menuSelection != 'A')
			{
				currentUser.setSearchedIndex(userName);
				//if getSearchedIndex >= 0
				if (currentUser.getSearchedIndex() >= 0)
				{
					displayAccountResults(userName);
				}//end of if selection
				//else searchedIndex < 0
				else
				{
					currentUser.setWriteOneRecord(userName, getPassword(input));
					displayAccountResults();
				}//end of else searchedIndex < 0
			}//end of if menuSelection != 'A'
			//else menuSelection does = 'A'
			else 
			{
				currentUser.setSearchedIndex(userName, getPassword(input));
				//if searchedIndex < 0
				if (currentUser.getSearchedIndex() < 0)
				{
					displayLoginError();
				}//end of if selection
				//else searchedIndex > 0
				else
				{
					menuSelection = validateFileSelection(input);
					//end of else selection for searchedIndex > 0
					//while loop for menuSelection != 'R'
					while (menuSelection != 'R')
					{
						//if selection == 'A'
						if(menuSelection == 'A')
						{
							currentInventory.setLoadItems(getFileName(input));
							//if recordCount <=0
							if (currentInventory.getRecordCount() <= 0)
							{
								//file error
								displayFileError();
							}//end of if recordCount <= 0
							//else recordCount > 0
							else
							{
								//record report is displayed
								displayRecordReport(currentInventory.getRecordCount());
							}//end of else recordCount > 0
							//menuSelection = validateFileSelection(input);
						}//end of if menu Selection == 'A'
						//else menuSelection != 'A'
						else
						{
							currentInventory.setSearchIndex(validateSearchValue(input));
							//end of else menuSelection != 'A'
							//if searchIndex < 0
							if (currentInventory.getItemSearchIndex() < 0)
							{
								//not found
								displayNotFound();
							}//end of if searchIndex < 0
							//else searchIndex > 0
							else
							{
								currentOrder.setLastItemSelectedIndex(currentInventory.getItemSearchIndex());
								currentOrder.setItemID(currentInventory.getItemIDs());
								currentOrder.setItemPrice(currentInventory.getItemPrices());
								currentOrder.setItemName(currentInventory.getItemNames());
								currentOrder.setHowMany(validateHowMany(input));
								//end of else searchIndex > 0
								//if inStockCounts < howMany
								if (currentOrder.getInStockCount(currentInventory.getInStockCounts()) < currentOrder.getHowMany())
								{
									//out of stock
									displayOutOfStock();
								}//end of if inStockCounts < howMany
								//else in stock
								else
								{
									currentOrder.setDiscountType(validateDiscountMenu(input, currentInventory.getDiscountNames(),currentInventory.getDiscountRates()));
									currentOrder.setDiscountName(currentInventory.getDiscountNames());
									currentOrder.setDiscountRate(currentInventory.getDiscountRates());
									currentOrder.setDecreaseInStock(currentInventory);
									currentOrder.setPrizeName(currentInventory.getPrizeNames(), currentInventory.getRandomNumber());
									orders.setWriteOrder(currentOrder.getItemID(), currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getTotalCost());
									//end of else in stock
									//if discountRate is > 0.0
									if (currentOrder.getDiscountRate() > 0.0)
									{
										//display order report
										displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getDiscountName(), currentOrder.getDiscountRate(),
												currentOrder.getDiscountAmt(), currentOrder.getDiscountPrice(), currentOrder.getSubTotal(), currentOrder.getTaxRate(), currentOrder.getTaxAmt(), currentOrder.getTotalCost(),
												currentOrder.getPrizeName(), currentOrder.getInStockCount(currentInventory.getInStockCounts()));
									}//end of if discountRate is > 0.0
									//else discountRate < 0.0
									else
									{
										//display order report
										displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getSubTotal(), currentOrder.getTaxRate(), currentOrder.getTaxAmt(), currentOrder.getTotalCost(),
												currentOrder.getPrizeName(), currentOrder.getInStockCount(currentInventory.getInStockCounts()));
									}//end of else discount rate < 0.0
								}//end of else in stock
							}//end of else search index > 0
						}//end of menuSelection != 'R'
						//validate file selection
						menuSelection = validateFileSelection(input);
					}//END of searchIndex > 0
				}//end of while menuSelection != 'R'
			}//end of else selection for searchedIndex > 0
			//validate menu selection
			menuSelection = validateMenuSelection(input);
		}//End of while selection != 'Q' 
		//quit is selected
		currentInventory.setLoadItems(orders.getFileName(), orders.getRecordCount());
		//if recordCount > 0
		if (orders.getRecordCount() > 0)
		{
			//display the final report
			displayFinalReport(currentInventory.getItemIDs(), currentInventory.getItemNames(), currentInventory.getItemPrices(), currentInventory.getOrderQuantities(),
					currentInventory.getOrderTotals(), currentInventory.getRecordCount(), currentInventory.getGrandTotal());
		}//end of if record count is > 0

		//display farewell message
		displayFarewellMessage();

		//close scanner
		input.close();
	}//END of main method

	//void methods
	//Start to welcome banner VOID method
	public static void displayWelcomeBanner()
	{
		//Display welcome banner
		System.out.print("\n*******************************************************");
		System.out.print("\nWelcome to the Ordering Program! This program");
		System.out.print("\nwill help to calculate your total for your order");
		System.out.print("\nwith the inventory we have in stock. Discounts ");
		System.out.print("\nwill be subtracted from your total, if applicable.");
		System.out.print("\nYou will, also, qualify for a prize!");
		System.out.print("\n*******************************************************");
	}//END OF welcome banner VOID method

	//Start to farewell message VOID method
	public static void displayFarewellMessage()
	{
		//Display Farewell message
		System.out.print("\n\nThank you for using the Ordering Program! ");
		System.out.print("\nEnjoy your purchases and lucky prizes! Please use our ");
		System.out.print("\nprogram next time for your order purchases!");
	}//END OF farewell message VOID method

	//Start to main menu VOID method
	public static void displayMainMenu()
	{
		//declare and initialize local variables
		int localIndex = 0;
		//menu title
		System.out.print("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("\nMAIN MENU");

		//while loop
		while (localIndex < MENU_OPTIONS.length)
		{
			//display menu- char options
			System.out.printf("\n%-1s%1s%1s%1s%1s", "[",MENU_CHARS[localIndex],"] ", " for ", MENU_OPTIONS[localIndex]);
			//increment LCV
			localIndex++;
		}//END of while loop

		//menu prompt
		System.out.print("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("\nEnter your selection here: ");
	}//END of main menu VOID method

	//start to discount menu VOID method
	public static void displayDiscountMenu(String[] borrowedDiscountName, double[] borrowedDiscountRates)
	{
		//declare and initialize local variables
		int localIndex = 0;
		//menu title
		System.out.print("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("\nDISCOUNT MENU");

		//while loop
		while (localIndex < borrowedDiscountName.length)
		{
			//display menu - char options
			System.out.printf("\n%-1s%1s%1s%-13s%13.1f%1s", "[", SUB_MENU_CHARS[localIndex], "] for ", borrowedDiscountName[localIndex], borrowedDiscountRates[localIndex] * 100, "%" );
			//increment LCV
			localIndex++;
		}//END of while loop

		//menu prompt
		System.out.print("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("\nPlease make your selection here: ");
	}//END of discount menu VOID method

	//Start to file menu VOID method
	public static void displayFileMenu()
	{
		//declare and initialize local variables
		int localIndex = 0;
		//menu title
		System.out.print("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("\nFILE MENU");

		//while loop
		while (localIndex < FILE_MENU_OPTIONS.length)
		{
			//display menu- char options
			System.out.printf("\n%-1s%1s%1s%1s%1s", "[",FILE_MENU_CHARS[localIndex],"] ", " for ", FILE_MENU_OPTIONS[localIndex]);
			//increment LCV
			localIndex++;
		}//END of while loop

		//menu prompt
		System.out.print("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("\nEnter your selection here: ");
	}//END of file menu VOID method

	//display acct results
	public static void displayAccountResults()
	{
		System.out.print("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("\nACCOUNT RESULTS\n");
		System.out.print("New account created");
		System.out.print("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//end of display acct results

	//display acct results : OVERLOADED
	public static void displayAccountResults(String userName)
	{
		System.out.print("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("\nACCOUNT RESULTS\n");
		System.out.print("Account not created: username " + userName + " already exists");
		System.out.print("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//end of display acct results : OVERLOADED

	//display login error
	public static void displayLoginError()
	{
		System.out.print("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("\nLOGIN ERROR\n");
		System.out.print("Username and/or Password is incorrect");
		System.out.print("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//end of display login error

	//display not open VOID method
	public static void displayFileError()
	{
		//Display  message
		System.out.print("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
		System.out.print("\nFILE ERROR\n");
		System.out.print("The file named was not found or could not be opened");
		System.out.print("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
	}//END  display not open VOID method

	//display record report VOID method
	public static void displayRecordReport(int recordCount)
	{
		System.out.print("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("\nRECORD REPORT");
		System.out.print("\n" + recordCount + " records processed");
		System.out.print("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
	}//END of record report VOID method

	//display not found VOID method
	public static void displayNotFound()
	{
		System.out.print("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("\nNOT FOUND ERROR");
		System.out.print("\nThe search value entered was not found");
		System.out.print("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
	}//END of record report VOID method

	//display out of stock error VOID method
	public static void displayOutOfStock()
	{
		System.out.print("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("\nOUT OF STOCK ERROR");
		System.out.print("\nThe quantity entered is greater than the quantity in-stock");
		System.out.print("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
	}//END of record report VOID method

	//display order report VOID method
	public static void displayOrderReport(String borrowedUserName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany,
			String borrowedDiscountName, double borrowedDiscountRate, double borrowedDiscountAmt,
			double borrowedDiscountPrice, double borrowedSubTotal, double borrowedTaxRate,
			double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCount)
	{
		//Display order report
		System.out.print("\n~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~~");
		System.out.print("\nORDER REPORT ");
		System.out.print("\n~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~~");
		System.out.printf("\n%5s%9s", "Customer Name:", borrowedUserName);
		//Additional line added for console
		System.out.print("\n");
		System.out.printf("%-8s%10s%3s\n", "Item Name:"," ", borrowedItemName);
		System.out.printf("%-8s%10s%5.2f\n", "Item Price: ", "$ ", borrowedItemPrice);
		//Additional line added for console
		System.out.print("\n");
		System.out.printf("%-20s%1s\n", "Discount Name: ", borrowedDiscountName);
		System.out.printf("%-8s%11.1f%1s\n", "Discount Rate: ", borrowedDiscountRate * 100, "%");
		System.out.printf("%-8s%5s%5.2f\n", "Discount Amount: ", "$ ", borrowedDiscountAmt);
		System.out.printf("%-8s%6s%5.2f\n", "Discount Price: ", "$ ", borrowedDiscountPrice);
		//Additional line added for console
		System.out.print("\n");
		System.out.printf("%-8s%17s\n", "Quantity: ", borrowedHowMany);
		//Additional line added for console
		System.out.print("\n");
		System.out.printf("%-8s%12s%5.2f\n", "Subtotal: ", "$ ", borrowedSubTotal);
		System.out.printf("%-8s%16.1f%1s\n", "Tax Rate: ", borrowedTaxRate * 100, "%");
		System.out.printf("%-8s%10s%5.2f\n", "Tax Amount: ", "$ ", borrowedTaxAmt);
		//Additional line added for console
		System.out.print("\n");
		System.out.printf("%-8s%10s%5.2f\n", "Order Total:", "$ ", borrowedTotalCost);
		//Additional line added for console
		System.out.print("\n");
		System.out.printf("%-20s%7s\n", "Prize: ", borrowedPrizeName);
		//Additional line added for console
		System.out.print("\n");
		System.out.print("\nBuy more now: Only " + borrowedInStockCount + " left in stock!");
		System.out.print("\n~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~~");
	}//END of display order report VOID method

	//OVERLOADED display order report VOID method
	public static void displayOrderReport(String borrowedUserName, String borrowedItemName,double borrowedItemPrice, int borrowedHowMany,
			double borrowedSubTotal, double borrowedTaxRate, double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCount)
	{
		//Display order report
		System.out.print("\n~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~~");
		System.out.print("\nORDER REPORT ");
		System.out.print("\n~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~~");
		System.out.printf("\n%5s%9s", "Customer Name:", borrowedUserName);
		//Additional line added for console
		System.out.print("\n");
		System.out.printf("%-8s%10s%3s\n", "Item Name:"," ", borrowedItemName);
		System.out.printf("%-8s%10s%5.2f\n", "Item Price: ", "$ ", borrowedItemPrice);
		//Additional line added for console
		System.out.print("\n");
		System.out.printf("\n%-8s%17s", "Quantity: ", borrowedHowMany);
		//Additional line added for console
		System.out.print("\n");
		System.out.printf("\n%-8s%12s%5.2f", "Subtotal: ", "$ ", borrowedSubTotal);
		System.out.printf("\n%-8s%16.1f%1s", "Tax Rate: ", borrowedTaxRate * 100, "%");
		System.out.printf("\n%-8s%10s%5.2f", "Tax Amount: ", "$ ", borrowedTaxAmt);
		//Additional line added for console
		System.out.print("\n");
		System.out.printf("\n%-8s%10s%5.2f", "Order Total:", "$ ", borrowedTotalCost);
		//Additional line added for console
		System.out.print("\n");
		System.out.printf("\n%-20s%7s", "Prize: ", borrowedPrizeName);
		//Additional line added for console
		System.out.print("\n");
		System.out.print("\nBuy more now: Only " + borrowedInStockCount + " left in stock!");
		System.out.print("\n~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~~");
	}//END of OVERLOADED display order report VOID method

	//display final report VOID method
	public static void displayFinalReport(int[] borrowedItemIDs, String[] borrowedItemNames, double[] borrowedItemPrices,
			int[] borrowedOrderQuantities, double[] borrowedOrderTotals,int borrowedRecordCount, double borrowedGrandTotal)
	{
		int recordCount = 0;
		//display final report
		System.out.print("\n~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~~");
		System.out.print("\nFINAL REPORT ");
		System.out.print("\n~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~~");
		//while loop
		System.out.printf("\n%2s%10s%22s%10s%10s", "ID", "NAME", "PRICE", "QTY", "TOTAL");
		while (recordCount < borrowedRecordCount)
		{
			System.out.printf("\n%2s%6s%15s%6s%2.2f%9d%12.2f", borrowedItemIDs[recordCount],"", borrowedItemNames[recordCount],"", borrowedItemPrices[recordCount], borrowedOrderQuantities[recordCount], borrowedOrderTotals[recordCount]);
			recordCount++;
		}//end of while
		System.out.printf("\n\n%1s", "GRAND TOTAL");
		System.out.printf("\n%1s%5.2f", "$", borrowedGrandTotal);
		System.out.print("\n~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~~");

	}//END of display final report	

	//VR METHODS

	//vr method to get the user name
	public static String getUserName(Scanner borrowedInput)
	{
		String localUserName = "";
		//prime read
		System.out.print("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("\nEnter your username: ");
		localUserName = borrowedInput.next();
		return localUserName;
	}//END of vr method for user name

	//vr method to get the user name
	public static String getPassword(Scanner borrowedInput)
	{
		String localPassword = "";
		//prime read
		System.out.print("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("\nEnter your password: ");
		localPassword = borrowedInput.next();
		return localPassword;
	}//END of vr method for user name

	//get file name method
	public static String getFileName(Scanner borrowedInput)
	{ 
		String localFileName = "";
		//prime read
		System.out.print("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("\nEnter the file name with extension (i.e.file.txt): ");
		localFileName = borrowedInput.next();
		return localFileName;
	}//END of get file name method

	//validation for main menu
	public static char validateMenuSelection(Scanner borrowedInput)
	{
		char localSelection = ' ';
		//prime read
		displayMainMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);

		//validation loop
		while (localSelection != MENU_CHARS[0] && localSelection != MENU_CHARS[1] && localSelection != MENU_CHARS[2])
		{
			//error message
			System.out.print("\n~~ERROR: Invalid Selection.~~");
			//update read
			displayMainMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//END of validation loop
		return localSelection;
	}//END main menu validation

	//validation for file menu
	public static char validateFileSelection(Scanner borrowedInput)
	{
		char localSelection = ' ';
		//prime read
		displayFileMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);

		//validation loop
		while (localSelection != FILE_MENU_CHARS[0] && localSelection != FILE_MENU_CHARS[1] && localSelection != FILE_MENU_CHARS[2])
		{
			//error message
			System.out.print("\n~~ERROR: Invalid Selection.~~");
			//update read
			displayFileMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//END of validation loop
		return localSelection;
	}//END main menu validation

	//discount menu validation
	public static char validateDiscountMenu(Scanner borrowedInput, String[] borrowedDiscountNames, 
			double[] borrowedDiscountRates)
	{
		char localSelection = ' ';
		//prime read
		displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		//validation loop
		while (localSelection != SUB_MENU_CHARS[0] && localSelection != SUB_MENU_CHARS[1] &&
				localSelection != SUB_MENU_CHARS[2] && localSelection != SUB_MENU_CHARS[3])
		{
			//error message
			System.out.print("\n~~ERROR: Invalid Selection.~~");
			//update read
			displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//END of validation loop
		return localSelection;
	}//END discount menu validation

	//vr method to validate how many
	public static String validateHowMany(Scanner borrowedInput)
	{
		String localHowMany = "";
		System.out.print("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("\nPlease enter a quantity: ");
		localHowMany = borrowedInput.next();

		//validation loop
		while (Integer.parseInt(localHowMany) <= 0)
		{
			//error message
			System.out.print("\n~~ERROR: Invalid quantity.~~");
			//update read
			System.out.print("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			System.out.print("\nPlease enter a quantity: ");
			localHowMany = borrowedInput.next();
		}//END of validation loop
		return localHowMany;
	}//END of vr method for how many

	//validation for search value
	public static int validateSearchValue(Scanner borrowedInput)
	{
		int localSearchValue = 0;
		System.out.print("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("\nEnter the search value: ");
		localSearchValue = borrowedInput.nextInt();

		//validation loop
		while (localSearchValue < 0)
		{
			//error message
			System.out.print("\n~~ERROR: Invalid value.~~");
			//update read
			System.out.print("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			System.out.print("\nEnter the search value: ");
			localSearchValue = borrowedInput.nextInt();
		}//END of validation loop
		return localSearchValue;
	}//END of search value validation

}//end of main class
